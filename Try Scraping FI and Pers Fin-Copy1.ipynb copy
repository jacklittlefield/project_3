{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import json\n",
    "import pandas as pd\n",
    "import time\n",
    "from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n",
    "\n",
    "url = 'http://www.reddit.com/r/personalfinance.json'\n",
    "posts = []\n",
    "after = None\n",
    "var = 0\n",
    "\n",
    "\n",
    "for _ in range(100):\n",
    "    if after == None:\n",
    "        curent_url = url\n",
    "    else:\n",
    "        curent_url = url + '?after=' + after\n",
    "    print(curent_url)\n",
    "    res = requests.get(curent_url, headers = {'User-agent':'Jacks bot'})\n",
    "    if res.status_code != 200:\n",
    "        print('States Error', res.status_code)\n",
    "        break\n",
    "    print(var)\n",
    "    var += 1\n",
    "    curent_dict = res.json()\n",
    "    curent_posts = [p['data'] for p in curent_dict['data']['children']]\n",
    "    posts.extend(curent_posts)\n",
    "    after = curent_dict['data']['after']\n",
    "    time.sleep(1.2)   \n",
    "    \n",
    "\n",
    "PI_data = pd.DataFrame(posts)\n",
    "pd.DataFrame(posts).to_csv('PI.csv', index = False)\n",
    "\n",
    "url = 'http://www.reddit.com/r/financialindependence.json'\n",
    "posts = []\n",
    "after = None\n",
    "var = 0\n",
    "\n",
    "\n",
    "for _ in range(100):\n",
    "    if after == None:\n",
    "        curent_url = url\n",
    "    else:\n",
    "        curent_url = url + '?after=' + after\n",
    "    print(curent_url)\n",
    "    res = requests.get(curent_url, headers = {'User-agent':'Jacks bot'})\n",
    "    if res.status_code != 200:\n",
    "        print('States Error', res.status_code)\n",
    "        break\n",
    "    print(var)\n",
    "    var += 1\n",
    "    curent_dict = res.json()\n",
    "    curent_posts = [p['data'] for p in curent_dict['data']['children']]\n",
    "    posts.extend(curent_posts)\n",
    "    after = curent_dict['data']['after']\n",
    "    time.sleep(1.2)  \n",
    "\n",
    "FI_data['subreddit']\n",
    "\n",
    "FI_data = pd.DataFrame(posts)\n",
    "pd.DataFrame(posts).to_csv('FI.csv', index = False)\n",
    "\n",
    "\n",
    "\n",
    "comb_df = PI_data[['title', 'subreddit']]\n",
    "\n",
    "comb_df = pd.concat((comb_df, FI_data[['title', 'subreddit']]), axis=0)\n",
    "\n",
    "comb_df.shape\n",
    "\n",
    "comb_df.to_csv('fin_data.csv')\n",
    "\n",
    "comb_df.loc[comb_df['subreddit'] != 'financialindependence', 'class'] = 0\n",
    "\n",
    "comb_df.loc[comb_df['subreddit'] != 'personalfinance', 'class'] = 1\n",
    "\n",
    "comb_df['class'] = comb_df['class'].astype(int)\n",
    "\n",
    "comb_df.head()\n",
    "\n",
    "df = comb_df\n",
    "\n",
    "comb_df.head()\n",
    "\n",
    "X = df['title']\n",
    "y = df['class']\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from bs4 import BeautifulSoup \n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction import stop_words\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y)\n",
    "\n",
    "cvec = CountVectorizer(stop_words='english', ngram_range=(2, 6))\n",
    "X_train = cvec.fit_transform(X_train)\n",
    "\n",
    "X_train.todense()\n",
    "\n",
    "X_test = cvec.transform(X_test)\n",
    "\n",
    "model_lr = LogisticRegression()\n",
    "print(cross_val_score(model_lr, X_train, y_train).mean())\n",
    "model_lr.fit(X_train, y_train)\n",
    "model_lr.predict(X_test)\n",
    "\n",
    "model_lr.score(X_test, y_test)\n",
    "\n",
    "coefs = model_lr.coef_\n",
    "\n",
    "names_1 = cvec.get_feature_names()\n",
    "\n",
    "coefs[0]\n",
    "\n",
    "names = pd.DataFrame({'coefs':coefs[0], 'names':names_1})\n",
    "\n",
    "names\n",
    "\n",
    "print(names.sort_values('coefs').head())\n",
    "\n",
    "print(names.sort_values('coefs').tail())\n",
    "\n",
    "rf = RandomForestClassifier()\n",
    "cross_val_score(rf, X_train, y_train).mean()\n",
    "\n",
    "rf.fit(X_train, y_train)\n",
    "rf.score(X_test, y_test)\n",
    "\n",
    "et = ExtraTreesClassifier(n_estimators=100)\n",
    "cross_val_score(et, X_train, y_train).mean()\n",
    "\n",
    "et.fit(X_train, y_train)\n",
    "\n",
    "print(et.score(X_test, y_test))\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:dsi]",
   "language": "python",
   "name": "conda-env-dsi-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
